/*
 * This is a grammar to parse strings describing the path shape.
 */

start = (draws)+

draws = moveTo / lineTo / horLineTo / verLineTo / curveTo / smoothTo / bezierTogetherTo / arcTo / close

close =
 "Z" { return { type:"Z" }} / "z" { return { type:"z" } }

number
  = digits:[0-9]+ ((".") [0-9]+)? { return parseFloat(digits.join(""), 10); }

curveType =
 "q" { return { type:"q"} }

moveTo
  = key:("M" / "m") ws* val:([ ]* x:number [ ,] y:number [ ]* { return {"x":x,"y":y} })+
    { return { type:key, values: val }}

lineTo
  = key:("L" / "l") ws* val:([ ]* x:number [ ,] y:number [ ]* { return {"x":x,"y":y} })+
    { return { type:key, values: val }}

horLineTo
  = key:("H" / "h") ws* val:([ ]* x:number [ ]*)
    { return { type:key, values: val[1] }}

verLineTo
  = key:("V" / "v") ws* val:([ ]* x:number [ ]*)
    { return { type:key, values: val[1] }}

curveTo
  = key:("C" / "c") ws* val:([ ]* x1:number ws y1:number ws x2:number ws y2:number ws x:number ws y:number [ ]*
                    { return [x1, y1, x2, y2, x, y]} )+
    { return { type:key, values: val }}

smoothTo
  = key:("S" / "s") ws* val:([ ]* x2:number ws y2:number ws x:number ws y:number [ ]*
                    { return [x2, y2, x, y]} )+
    { return { type: key, values: val }}

bezierTogetherTo
  = key:("T" / "t") ws* val:([ ]* x1:number ws y1:number [ ]*
                    { return [x1, y1]} )+
    { return { type:key, values: val }}

arcTo
  = key:("A" / "a") ws* val:([ ]* rx:number ws ry:number ws xrot:number ws arcflag:number ws sweep:number ws x:number y:number [ ]*
                    { return [rx, ry, xrot, arcflag, sweep, x, y]} )+
    { return { type:key, values: val }}

ws = [" "\t\r\n\,]
